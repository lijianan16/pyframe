{"name": "test_login[loging_2]", "status": "broken", "statusDetails": {"message": "TypeError: 'bool' object is not subscriptable", "trace": "self = <testcases.test_login.TestLogin object at 0x103d7e1d0>\ntestcase = {'actual': [{'check': 'eq', 'code': '$.code'}, {'check': 'eq', 'msg': '$.code'}], 'caseid': 'loging_2', 'cookie': None, 'data': {'pro_name': '大牛测试测试', 'pro_no': '{{pro_no}}'}, ...}\n\n    @allure.story(\"用户信息接口\")\n    @pytest.mark.parametrize(\"testcase\",testcases,ids = ids)\n    def test_login(self,testcase):\n>       res = BeginRequest().request_start(testcase)\n\ntestcases/test_login.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <common.para.requestdata.BeginRequest object at 0x104545410>\ntestcase = {'actual': [{'check': 'eq', 'code': '$.code'}, {'check': 'eq', 'msg': '$.code'}], 'caseid': 'loging_2', 'cookie': None, 'data': {'pro_name': '大牛测试测试', 'pro_no': '{{pro_no}}'}, ...}\n\n    def request_start(self,testcase):\n        try:\n            reqdata = RequestData(**testcase)\n            req_keyword = request_keyword(reqdata)\n            print(\"**********\")\n            print(req_keyword)\n            print(\"**********\")\n            extract = reqdata.extract\n            actual = reqdata.actual\n    \n            res = self.httpreq(req_keyword[0], req_keyword[1], **req_keyword[2])\n            response = self.result(res)\n            print(response)\n            # class\n            res_check = Resposne(**response)\n            res_dict = res_check.dict()\n            # 取值之后\n            if extract == None:\n                print(\"不需执行提取\")\n            else:\n                if None in extract.values():\n                    print(\"value is None 不执行\")\n                else:\n                    print(res_dict)\n                    # 提取值\n                    for key, value in extract.items():\n                        print(value)\n                        print(json_path(res_dict, value))\n                        # 调用redis方法\n    \n>                       redi.setred(key, json_path(res_dict, value)[0])\nE                       TypeError: 'bool' object is not subscriptable\n\ncommon/para/requestdata.py:81: TypeError"}, "parameters": [{"name": "testcase", "value": "{'name': 'env get', 'url': '/aiplat/pro/2', 'method': 'get', 'headers': {'Accept-Charset': 'UTF-8', 'Content-Type': 'application/json'}, 'cookie': None, 'run': 'y', 'type': 'params', 'data': {'pro_no': '{{pro_no}}', 'pro_name': '大牛测试测试'}, 'dependen': [{'casename': 'test01', 'replace': None}], 'extract': {'uuid': '$.uuid', 'img': '$.img'}, 'actual': [{'code': '$.code', 'check': 'eq'}, {'msg': '$.code', 'check': 'eq'}], 'expected': {'code': 200, 'msg': 'success'}, 'caseid': 'loging_2'}"}], "start": 1715667812507, "stop": 1715667812549, "uuid": "37758fcb-1b91-429a-ad75-e5c718f10b49", "historyId": "de8bd103e0410a48788d4b2173dee030", "testCaseId": "93a39feb8eb701231e6c069b76eeac98", "fullName": "testcases.test_login.TestLogin#test_login", "labels": [{"name": "feature", "value": "用户模块"}, {"name": "story", "value": "用户信息接口"}, {"name": "epic", "value": "用户功能"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "timdeMacBook-Pro.local"}, {"name": "thread", "value": "14570-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_login"}]}