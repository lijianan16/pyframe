{"name": "test_ticket[ticket_4]", "status": "broken", "statusDetails": {"message": "requests.exceptions.InvalidURL: Failed to parse: http://192.168.0.101:8080http://rap2api.taobao.org/app/mock/126135/api/applyChange", "trace": "self = <PreparedRequest [POST]>\nurl = 'http://192.168.0.101:8080http://rap2api.taobao.org/app/mock/126135/api/applyChange'\nparams = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode(\"utf8\")\n        else:\n            url = str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if \":\" in url and not url.lower().startswith(\"http\"):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n>           scheme, auth, host, port, path, query, fragment = parse_url(url)\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/requests/models.py:434: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nurl = 'http://192.168.0.101:8080http://rap2api.taobao.org/app/mock/126135/api/applyChange'\n\n    def parse_url(url):\n        \"\"\"\n        Given a url, return a parsed :class:`.Url` namedtuple. Best-effort is\n        performed to parse incomplete urls. Fields not provided will be None.\n        This parser is RFC 3986 and RFC 6874 compliant.\n    \n        The parser logic and helper functions are based heavily on\n        work done in the ``rfc3986`` module.\n    \n        :param str url: URL to parse into a :class:`.Url` namedtuple.\n    \n        Partly backwards-compatible with :mod:`urlparse`.\n    \n        Example::\n    \n            >>> parse_url('http://google.com/mail/')\n            Url(scheme='http', host='google.com', port=None, path='/mail/', ...)\n            >>> parse_url('google.com:80')\n            Url(scheme=None, host='google.com', port=80, path=None, ...)\n            >>> parse_url('/foo?bar')\n            Url(scheme=None, host=None, port=None, path='/foo', query='bar', ...)\n        \"\"\"\n        if not url:\n            # Empty\n            return Url()\n    \n        source_url = url\n        if not SCHEME_RE.search(url):\n            url = \"//\" + url\n    \n        try:\n            scheme, authority, path, query, fragment = URI_RE.match(url).groups()\n            normalize_uri = scheme is None or scheme.lower() in NORMALIZABLE_SCHEMES\n    \n            if scheme:\n                scheme = scheme.lower()\n    \n            if authority:\n                auth, _, host_port = authority.rpartition(\"@\")\n                auth = auth or None\n                host, port = _HOST_PORT_RE.match(host_port).groups()\n                if auth and normalize_uri:\n                    auth = _encode_invalid_chars(auth, USERINFO_CHARS)\n                if port == \"\":\n                    port = None\n            else:\n                auth, host, port = None, None, None\n    \n            if port is not None:\n                port = int(port)\n                if not (0 <= port <= 65535):\n                    raise LocationParseError(url)\n    \n            host = _normalize_host(host, scheme)\n    \n            if normalize_uri and path:\n                path = _remove_path_dot_segments(path)\n                path = _encode_invalid_chars(path, PATH_CHARS)\n            if normalize_uri and query:\n                query = _encode_invalid_chars(query, QUERY_CHARS)\n            if normalize_uri and fragment:\n                fragment = _encode_invalid_chars(fragment, FRAGMENT_CHARS)\n    \n        except (ValueError, AttributeError):\n>           return six.raise_from(LocationParseError(source_url), None)\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/urllib3/util/url.py:397: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalue = None, from_value = None\n\n>   ???\nE   urllib3.exceptions.LocationParseError: Failed to parse: http://192.168.0.101:8080http://rap2api.taobao.org/app/mock/126135/api/applyChange\n\n<string>:3: LocationParseError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.test_ticket.TestTicket object at 0x103e26bd0>\ntestcase = {'actual': [{'check': 'eq', 'method': '$.train_request_change'}, {'check': 'eq', 'transactionid': '$.transactionid'}],...otify ', 'change_checi ': 'D8805 ', 'change_datetime ': '2022 - 05 - 0316: 35: 00 ', 'change_zwcode ': 'O ', ...}, ...}\n\n    @allure.story(\"用户信息接口\")\n    @pytest.mark.parametrize(\"testcase\",testcases,ids = ids)\n    def test_ticket(self,testcase):\n>       res = BeginRequest().request_start(testcase)\n\ntestcases/test_ticket.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ncommon/para/requestdata.py:61: in request_start\n    res = self.httpreq(req_keyword[0], req_keyword[1], **req_keyword[2])\ncommon/utils/requestsession.py:21: in httpreq\n    res = self.req.request(method=method, url=url, **kwargs, timeout=(2, 3))\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/requests/sessions.py:573: in request\n    prep = self.prepare_request(req)\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/requests/sessions.py:484: in prepare_request\n    p.prepare(\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/requests/models.py:368: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PreparedRequest [POST]>\nurl = 'http://192.168.0.101:8080http://rap2api.taobao.org/app/mock/126135/api/applyChange'\nparams = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode(\"utf8\")\n        else:\n            url = str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if \":\" in url and not url.lower().startswith(\"http\"):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n>           raise InvalidURL(*e.args)\nE           requests.exceptions.InvalidURL: Failed to parse: http://192.168.0.101:8080http://rap2api.taobao.org/app/mock/126135/api/applyChange\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/requests/models.py:436: InvalidURL"}, "parameters": [{"name": "testcase", "value": "{'name': 'env get', 'url': 'http://rap2api.taobao.org/app/mock/126135/api/applyChange', 'method': 'post', 'headers': {'Accept-Charset': 'UTF-8', 'Content-Type': 'application/json'}, 'cookie': None, 'run': 'y', 'type': 'json', 'data': {'qkey': '{{qkey}}', 'method': 'train_request_change', 'reqtime': '20180503102041', 'sign': '72e172c1114332e0f82bc5f3b296b333', 'isChangeTo': False, 'partnerid': 'tclycom', 'from_station_code': '', 'from_station_name ': '苏州 ', 'to_station_code ': '', 'to_station_name ': '上海 ', 'orderid ': 'TGT_S93C2F2F317ECECF70542 ', 'transactionid ': '5AEA6C4F3F1E1 ', 'ordernumber ': 'E120765683 ', 'change_checi ': 'D8805 ', 'change_datetime ': '2022 - 05 - 0316: 35: 00 ', 'change_zwcode ': 'O ', 'old_zwcode ': 'O ', 'ticketinfo ': [{'passengersename ': '王春梅 ', 'passporttypeseid ': '1 ', 'passportseno ': '6000000000000 ', 'piaotype ': '1 ', 'old_ticket_no ': 'E120765683108005D '}], 'isasync ': 'Y ', 'callbackurl ': 'http: //t12306.com/trainOrder/services / changeOrderNotify ', 'reqtoken ': 'FT5AUA71F90005BB5U410542 '}, 'dependen': {'casename': 'ticket_2', 'replace': '$.qkey'}, 'extract': {'qkey': None}, 'actual': [{'method': '$.train_request_change', 'check': 'eq'}, {'transactionid': '$.transactionid', 'check': 'eq'}], 'expected': {'method': 'train_request_change', 'transactionid': '5AEA6C4F3F1E1'}, 'caseid': 'ticket_4'}"}], "start": 1715667812742, "stop": 1715667812754, "uuid": "58244e91-3e41-430c-bca5-de5760e7502b", "historyId": "33f438c2ba04425034681dcf4cd5b332", "testCaseId": "e0840f56c924717bc8210fbf1b3239a1", "fullName": "testcases.test_ticket.TestTicket#test_ticket", "labels": [{"name": "feature", "value": "用户模块"}, {"name": "story", "value": "用户信息接口"}, {"name": "epic", "value": "用户功能"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_ticket"}, {"name": "subSuite", "value": "TestTicket"}, {"name": "host", "value": "timdeMacBook-Pro.local"}, {"name": "thread", "value": "14570-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_ticket"}]}